# ARCHIVO DE EJEMPLO - NO USAR DIRECTAMENTE
# Este archivo muestra la configuración de ejemplo que debe aplicarse después del despliegue de Terraform
# IMPORTANTE: Este archivo NO debe aplicarse directamente con kubectl
# Usar los archivos en k8s/ para el despliegue real
# Las IPs hardcodeadas deben actualizarse con la IP real de Cloud SQL obtenida con: terraform output db_public_ip

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: medisupply
data:
  # Configuración general
  FLASK_ENV: "production"
  PYTHONPATH: "/app"
  
  # URLs de servicios (para comunicación entre microservicios)
  PRODUCTOS_SERVICE_URL: "http://productos-service:5000/productos/api"
  LOGISTICA_SERVICE_URL: "http://logistica-service:5003/logistica/api"
  
  # Configuración de GCP (se actualiza automáticamente)
  GCP_PROJECT_ID: "desarrolloswcloud"
  
  # Configuración de Pub/Sub
  PUBSUB_TOPIC: "medisupply-events-prod"
  PUBSUB_SUBSCRIPTION: "medisupply-subscription-prod"
  
  # Configuración de base de datos
  DB_PORT: "5432"
  
  # Nombres de bases de datos
  USUARIOS_DB_NAME: "usuarios_db"
  PRODUCTOS_DB_NAME: "productos_db"
  VENTAS_DB_NAME: "ventas_db"
  LOGISTICA_DB_NAME: "logistica_db"
---
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: medisupply
type: Opaque
data:
  # Usuarios DB (base64 encoded)
  usuarios-user: dXN1YXJpb3NfdXNlcg==
  usuarios-password: dXN1YXJpb3NfcGFzcw==
  
  # Productos DB (base64 encoded)
  productos-user: cHJvZHVjdG9zX3VzZXI=
  productos-password: cHJvZHVjdG9zX3Bhc3M=
  
  # Ventas DB (base64 encoded)
  ventas-user: dmVudGFzX3VzZXI=
  ventas-password: dmVudGFzX3Bhc3M=
  
  # Logística DB (base64 encoded)
  logistica-user: bG9naXN0aWNhX3VzZXI=
  logistica-password: bG9naXN0aWNhX3Bhc3M=
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: medisupply-ksa
  namespace: medisupply
  annotations:
    iam.gke.io/gcp-service-account: medisupply-workload-prod@desarrolloswcloud.iam.gserviceaccount.com
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productos-deployment
  namespace: medisupply
  labels:
    app: productos
spec:
  replicas: 2
  selector:
    matchLabels:
      app: productos
  template:
    metadata:
      labels:
        app: productos
    spec:
      serviceAccountName: medisupply-ksa
      containers:
      - name: productos
        image: gcr.io/desarrolloswcloud/productos:latest
        ports:
        - containerPort: 5000
        env:
        - name: FLASK_APP
          value: "src/main.py"
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: FLASK_ENV
        - name: PYTHONPATH
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: PYTHONPATH
        - name: DB_HOST
          # IMPORTANTE: Actualizar esta IP con la IP real de Cloud SQL
          # Ejecutar: terraform output db_public_ip
          value: "REPLACE_WITH_TERRAFORM_OUTPUT_IP"
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: PRODUCTOS_DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: productos-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: productos-password
        - name: SQLALCHEMY_DATABASE_URI
          value: "postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
        - name: USUARIOS_SERVICE_URL
          value: "http://usuarios-service:5001"
        - name: GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: GCP_PROJECT_ID
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: productos-service
  namespace: medisupply
  labels:
    app: productos
spec:
  selector:
    app: productos
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP
