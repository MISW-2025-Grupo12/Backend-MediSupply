{
	"info": {
		"_postman_id": "6c3c678c-f124-426b-8ba0-b94e20f48f7d",
		"name": "MediSupply - Flujo Completo",
		"description": "**MISO GRUPO 12:**\n\n- Manuel Sanchez\n    \n- Jairo Reyes\n    \n- Nicolas Malagon\n    \n- Sergio Perez\n    \n\nColecci√≥n completa de endpoints para MediSupply con flujo de ejecuci√≥n autom√°tico.\n\n## üèóÔ∏è Arquitectura\n\nEl sistema est√° compuesto por 4 microservicios:\n\n- **Usuarios** (Puerto 5001) - Gesti√≥n de proveedores, vendedores y clientes con autenticaci√≥n JWT\n    \n- **Productos** (Puerto 5000) - Cat√°logo de productos y categor√≠as\n    \n- **Ventas** (Puerto 5002) - Gesti√≥n de visitas y pedidos\n    \n- **Log√≠stica** (Puerto 5003) - Control de inventario, entregas y bodegas\n    \n\n## üöÄ Requisitos\n\n- Docker y Docker Compose\n    \n- Python 3.9+\n    \n- PostgreSQL 15\n    \n\n## üê≥ Ejecuci√≥n\n\n``` bash\ndocker-compose up -d\n\n ```\n\n## üìã Flujo de Ejecuci√≥n\n\n1. **Configuraci√≥n Inicial** - Verificar servicios\n    \n2. **Autenticaci√≥n JWT** - Registrar usuarios y obtener tokens (vendedores, clientes, proveedores)\n    \n3. **Crear Entidades Base** - Proveedores, Categor√≠as, Vendedores, Clientes\n    \n4. **Crear Productos** - Con y sin inventario\n    \n5. **Crear Visitas** - Programar visitas de venta\n    \n6. **Crear Pedidos** - Con items y confirmaci√≥n (incluye pedido completo)\n    \n7. **Gestionar Inventario** - Reservas y descuentos\n    \n8. **Gestionar Bodegas** - Inicializar y consultar ubicaciones\n    \n9. **Consultar Entregas** - Ver entregas programadas\n    \n10. **Informes de Ventas** - Consultar datos de ventas por vendedor y fechas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30409960",
		"_collection_link": "https://drones-8622.postman.co/workspace/CloudOps-MISO~6e478cc9-85ca-4be0-88ce-7294df068b85/collection/30409960-6c3c678c-f124-426b-8ba0-b94e20f48f7d?action=share&source=collection_link&creator=30409960"
	},
	"item": [
		{
			"name": "üîß 1. Configuraci√≥n Inicial",
			"item": [
				{
					"name": "Health Check - Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Servicio de Usuarios est√° funcionando', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('up');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_usuarios}}/health",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Verifica el estado del microservicio de Usuarios"
					},
					"response": []
				},
				{
					"name": "Health Check - Productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Servicio de Productos est√° funcionando', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('up');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_productos}}/health",
							"host": [
								"{{base_url_productos}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Verifica el estado del microservicio de Productos"
					},
					"response": []
				},
				{
					"name": "Health Check - Ventas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Servicio de Ventas est√° funcionando', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('up');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/health",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Verifica el estado del microservicio de Ventas"
					},
					"response": []
				},
				{
					"name": "Health Check - Log√≠stica",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Servicio de Log√≠stica est√° funcionando', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('up');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/health",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Verifica el estado del microservicio de Log√≠stica"
					},
					"response": []
				}
			],
			"description": "Verificar que todos los servicios est√©n funcionando correctamente"
		},
		{
			"name": "üîê 2. Autenticaci√≥n JWT",
			"item": [
				{
					"name": "Registro de Vendedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vendedor registrado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('mensaje');",
									"    pm.expect(response).to.have.property('vendedor');",
									"    pm.expect(response.vendedor).to.have.property('id');",
									"    pm.collectionVariables.set('vendedor_auth_id', response.vendedor.id);",
									"    console.log('Vendedor registrado con ID:', response.vendedor.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Mar√≠a Garc√≠a\",\n    \"email\": \"maria.garcia@empresa.com\",\n    \"identificacion\": \"9876543210\",\n    \"telefono\": \"3009876543\",\n    \"direccion\": \"Calle 45 #67-89\",\n    \"password\": \"MiPassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_usuarios}}/api/auth/registro-vendedor",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"api",
								"auth",
								"registro-vendedor"
							]
						},
						"description": "Registra un nuevo vendedor con autenticaci√≥n JWT"
					},
					"response": []
				},
				{
					"name": "Registro de Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cliente registrado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('mensaje');",
									"    pm.expect(response).to.have.property('cliente');",
									"    pm.expect(response.cliente).to.have.property('id');",
									"    pm.collectionVariables.set('cliente_auth_id', response.cliente.id);",
									"    console.log('Cliente registrado con ID:', response.cliente.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Cl√≠nica Los Olivos\",\n    \"email\": \"contacto@losolivos.com\",\n    \"identificacion\": \"8609876543\",\n    \"telefono\": \"6014567890\",\n    \"direccion\": \"Avenida 15 #23-45\",\n    \"password\": \"ClinicaPass456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_usuarios}}/api/auth/registro-cliente",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"api",
								"auth",
								"registro-cliente"
							]
						},
						"description": "Registra un nuevo cliente con autenticaci√≥n JWT"
					},
					"response": []
				},
				{
					"name": "Registro de Proveedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Proveedor registrado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('mensaje');",
									"    pm.expect(response).to.have.property('proveedor');",
									"    pm.expect(response.proveedor).to.have.property('id');",
									"    pm.collectionVariables.set('proveedor_auth_id', response.proveedor.id);",
									"    console.log('Proveedor registrado con ID:', response.proveedor.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Pfizer Colombia\",\n    \"email\": \"contacto@pfizer.com.co\",\n    \"identificacion\": \"9005678901\",\n    \"telefono\": \"6017654321\",\n    \"direccion\": \"Carrera 9 #50-30, Bogot√°\",\n    \"password\": \"PfizerSecure789\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_usuarios}}/api/auth/registro-proveedor",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"api",
								"auth",
								"registro-proveedor"
							]
						},
						"description": "Registra un nuevo proveedor con autenticaci√≥n JWT"
					},
					"response": []
				},
				{
					"name": "Login de Vendedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login exitoso', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response).to.have.property('user_info');",
									"    pm.expect(response.user_info).to.have.property('tipo_usuario');",
									"    pm.expect(response.user_info.tipo_usuario).to.eql('VENDEDOR');",
									"    pm.collectionVariables.set('access_token', response.access_token);",
									"    console.log('Token JWT guardado');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"maria.garcia@empresa.com\",\n    \"password\": \"MiPassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_usuarios}}/api/auth/login",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Autentica un vendedor y obtiene token JWT"
					},
					"response": []
				}
			],
			"description": "Registrar usuarios y obtener tokens JWT para autenticaci√≥n"
		},
		{
			"name": "üë• 3. Crear Entidades Base",
			"item": [
				{
					"name": "Crear Proveedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Proveedor creado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.collectionVariables.set('proveedor_id', response.id);",
									"    console.log('Proveedor ID guardado:', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Bayer Colombia\",\n    \"email\": \"contacto@bayer.com.co\",\n    \"identificacion\": \"9001234567\",\n    \"telefono\": \"6013456789\",\n    \"direccion\": \"Carrera 7 #32-16, Bogot√°, Colombia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_usuarios}}/api/proveedores/",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"api",
								"proveedores",
								""
							]
						},
						"description": "Crea un nuevo proveedor y guarda su ID para uso posterior"
					},
					"response": []
				},
				{
					"name": "Crear Categor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Categor√≠a creada exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.collectionVariables.set('categoria_id', response.id);",
									"    console.log('Categor√≠a ID guardada:', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Medicamentos\",\n    \"descripcion\": \"Productos farmac√©uticos y medicamentos\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_productos}}/api/categorias/",
							"host": [
								"{{base_url_productos}}"
							],
							"path": [
								"api",
								"categorias",
								""
							]
						},
						"description": "Crea una nueva categor√≠a y guarda su ID para uso posterior"
					},
					"response": []
				},
				{
					"name": "Crear Vendedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vendedor creado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.collectionVariables.set('vendedor_id', response.id);",
									"    console.log('Vendedor ID guardado:', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Juan P√©rez\",\n    \"email\": \"juan.perez@empresa.com\",\n    \"identificacion\": \"1234567890\",\n    \"telefono\": \"3001234567\",\n    \"direccion\": \"Calle 123 #45-67\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_usuarios}}/api/vendedores/",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"api",
								"vendedores",
								""
							]
						},
						"description": "Crea un nuevo vendedor y guarda su ID para uso posterior"
					},
					"response": []
				},
				{
					"name": "Crear Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cliente creado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.collectionVariables.set('cliente_id', response.id);",
									"    console.log('Cliente ID guardado:', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Hospital San Ignacio\",\n    \"email\": \"contacto@sanignacio.com\",\n    \"identificacion\": \"8601234567\",\n    \"telefono\": \"3115566778\",\n    \"direccion\": \"Cra 11 # 89 - 76\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_usuarios}}/api/clientes/",
							"host": [
								"{{base_url_usuarios}}"
							],
							"path": [
								"api",
								"clientes",
								""
							]
						},
						"description": "Crea un nuevo cliente y guarda su ID para uso posterior"
					},
					"response": []
				}
			],
			"description": "Crear proveedores, categor√≠as, vendedores y clientes necesarios para el flujo"
		},
		{
			"name": "üì¶ 4. Crear Productos",
			"item": [
				{
					"name": "Crear Producto B√°sico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Producto b√°sico creado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.collectionVariables.set('producto_basico_id', response.id);",
									"    console.log('Producto b√°sico ID guardado:', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Paracetamol 500mg\",\n    \"descripcion\": \"Analg√©sico y antipir√©tico\",\n    \"precio\": 25000,\n    \"categoria\": \"Medicamentos\",\n    \"categoria_id\": \"{{categoria_id}}\",\n    \"proveedor_id\": \"{{proveedor_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_productos}}/api/productos/",
							"host": [
								"{{base_url_productos}}"
							],
							"path": [
								"api",
								"productos",
								""
							]
						},
						"description": "Crea un producto b√°sico sin inventario"
					},
					"response": []
				},
				{
					"name": "Crear Producto con Inventario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Producto con inventario creado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.collectionVariables.set('producto_inventario_id', response.id);",
									"    console.log('Producto con inventario ID guardado:', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Ibuprofeno 400mg\",\n    \"descripcion\": \"Antiinflamatorio no esteroideo\",\n    \"precio\": 18000,\n    \"stock\": 50,\n    \"fecha_vencimiento\": \"2025-12-31T00:00:00Z\",\n    \"categoria\": \"Medicamentos\",\n    \"categoria_id\": \"{{categoria_id}}\",\n    \"proveedor_id\": \"{{proveedor_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_productos}}/api/productos/con-inventario",
							"host": [
								"{{base_url_productos}}"
							],
							"path": [
								"api",
								"productos",
								"con-inventario"
							]
						},
						"description": "Crea un producto con informaci√≥n de inventario incluida"
					},
					"response": []
				},
				{
					"name": "Listar Todos los Productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Productos listados exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Total de productos:', response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_productos}}/api/productos/",
							"host": [
								"{{base_url_productos}}"
							],
							"path": [
								"api",
								"productos",
								""
							]
						},
						"description": "Lista todos los productos creados"
					},
					"response": []
				}
			],
			"description": "Crear productos con y sin inventario usando las entidades base creadas"
		},
		{
			"name": "üìÖ 5. Crear Visitas",
			"item": [
				{
					"name": "Crear Visita de Venta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Visita creada exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.collectionVariables.set('visita_id', response.id);",
									"    console.log('Visita ID guardada:', response.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vendedor_id\": \"{{vendedor_id}}\",\n    \"cliente_id\": \"{{cliente_id}}\",\n    \"fecha_programada\": \"2026-10-15T10:00:00\",\n    \"direccion\": \"Cra 11 # 89 - 76\",\n    \"telefono\": \"3115566778\",\n    \"estado\": \"pendiente\",\n    \"descripcion\": \"Visita programada para presentaci√≥n de productos\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ventas}}/api/visitas/",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"visitas",
								""
							]
						},
						"description": "Crea una nueva visita de venta programada"
					},
					"response": []
				},
				{
					"name": "Listar Visitas Pendientes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Visitas pendientes listadas exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Total de visitas pendientes:', response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/visitas/?estado=pendiente",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"visitas",
								""
							],
							"query": [
								{
									"key": "estado",
									"value": "pendiente"
								}
							]
						},
						"description": "Lista las visitas en estado pendiente"
					},
					"response": []
				},
				{
					"name": "Listar Visitas por Rango de Fechas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Visitas por rango de fechas listadas exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Total de visitas en el rango:', response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/visitas/?fecha_inicio=2025-10-13&fecha_fin=2025-10-17&estado=pendiente",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"visitas",
								""
							],
							"query": [
								{
									"key": "fecha_inicio",
									"value": "2025-10-13",
									"description": "Fecha de inicio del rango (YYYY-MM-DD)"
								},
								{
									"key": "fecha_fin",
									"value": "2025-10-17",
									"description": "Fecha de fin del rango (YYYY-MM-DD)"
								},
								{
									"key": "estado",
									"value": "pendiente",
									"description": "Filtrar por estado de la visita"
								}
							]
						},
						"description": "Lista las visitas programadas en un rango de fechas espec√≠fico, filtradas por estado"
					},
					"response": []
				},
				{
					"name": "Listar Visitas por Vendedor y Fechas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Visitas por vendedor y fechas listadas exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Total de visitas del vendedor en el rango:', response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/visitas/vendedor/{{vendedor_id}}?fecha_inicio=2025-10-13&fecha_fin=2025-10-17&estado=pendiente",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"visitas",
								"vendedor",
								"{{vendedor_id}}"
							],
							"query": [
								{
									"key": "fecha_inicio",
									"value": "2025-10-13",
									"description": "Fecha de inicio del rango (YYYY-MM-DD)"
								},
								{
									"key": "fecha_fin",
									"value": "2025-10-17",
									"description": "Fecha de fin del rango (YYYY-MM-DD)"
								},
								{
									"key": "estado",
									"value": "pendiente",
									"description": "Filtrar por estado de la visita"
								}
							]
						},
						"description": "Lista las visitas de un vendedor espec√≠fico en un rango de fechas, filtradas por estado"
					},
					"response": []
				}
			],
			"description": "Crear visitas de venta programadas"
		},
		{
			"name": "üõí 6. Crear Pedidos",
			"item": [
				{
					"name": "Crear Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Pedido creado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('pedido_id');",
									"    pm.collectionVariables.set('pedido_id', response.pedido_id);",
									"    console.log('Pedido ID guardado:', response.pedido_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vendedor_id\": \"{{vendedor_id}}\",\n    \"cliente_id\": \"{{cliente_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ventas}}/api/pedidos/",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"pedidos",
								""
							]
						},
						"description": "Crea un nuevo pedido en estado borrador"
					},
					"response": []
				},
				{
					"name": "Crear Pedido Completo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Pedido completo creado y confirmado exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response).to.have.property('pedido_id');",
									"    pm.expect(response).to.have.property('estado');",
									"    pm.expect(response.estado).to.eql('confirmado');",
									"    pm.collectionVariables.set('pedido_completo_id', response.pedido_id);",
									"    console.log('Pedido completo creado y confirmado:', response.pedido_id);",
									"    console.log('Total del pedido:', response.total);",
									"    console.log('Items procesados:', response.items_count);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vendedor_id\": \"{{vendedor_id}}\",\n    \"cliente_id\": \"{{cliente_id}}\",\n    \"items\": [\n        {\n            \"producto_id\": \"{{producto_inventario_id}}\",\n            \"cantidad\": 5\n        },\n        {\n            \"producto_id\": \"{{producto_inventario_id}}\",\n            \"cantidad\": 3\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ventas}}/api/pedidos/completo",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"pedidos",
								"completo"
							]
						},
						"description": "Crea un pedido completo con items y lo confirma autom√°ticamente en una sola operaci√≥n. Valida inventario y reserva stock."
					},
					"response": []
				},
				{
					"name": "Agregar Item al Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Item agregado al pedido exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response.success).to.be.true;",
									"    console.log('Item agregado al pedido');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"producto_id\": \"{{producto_inventario_id}}\",\n    \"cantidad\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ventas}}/api/pedidos/{{pedido_id}}/items",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"pedidos",
								"{{pedido_id}}",
								"items"
							]
						},
						"description": "Agrega un producto al pedido con cantidad espec√≠fica"
					},
					"response": []
				},
				{
					"name": "Obtener Detalle del Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Detalle del pedido obtenido exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    console.log('Pedido obtenido:', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/pedidos/{{pedido_id}}",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"pedidos",
								"{{pedido_id}}"
							]
						},
						"description": "Obtiene el detalle completo del pedido con sus items"
					},
					"response": []
				},
				{
					"name": "Confirmar Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Pedido confirmado exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response.success).to.be.true;",
									"    console.log('Pedido confirmado y enviado a log√≠stica');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/pedidos/{{pedido_id}}/confirmar",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"pedidos",
								"{{pedido_id}}",
								"confirmar"
							]
						},
						"description": "Confirma el pedido y lo env√≠a a log√≠stica para procesamiento"
					},
					"response": []
				}
			],
			"description": "Crear pedidos con items y confirmarlos"
		},
		{
			"name": "üì¶ 7. Gestionar Inventario",
			"item": [
				{
					"name": "Buscar Productos con Inventario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('B√∫squeda de productos con inventario exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Productos con inventario encontrados:', response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/inventario/buscar?q=ibuprofeno&limite=10",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"inventario",
								"buscar"
							],
							"query": [
								{
									"key": "q",
									"value": "ibuprofeno"
								},
								{
									"key": "limite",
									"value": "10"
								}
							]
						},
						"description": "Busca productos que tengan inventario disponible"
					},
					"response": []
				},
				{
					"name": "Obtener Inventario de Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Inventario del producto obtenido exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('producto_id');",
									"    console.log('Inventario del producto:', response.producto_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/inventario/producto/{{producto_inventario_id}}",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"inventario",
								"producto",
								"{{producto_inventario_id}}"
							]
						},
						"description": "Obtiene el inventario detallado de un producto espec√≠fico con ubicaciones en bodegas"
					},
					"response": []
				},
				{
					"name": "Obtener Todo el Inventario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Inventario completo obtenido exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Total de productos en inventario:', response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/inventario/",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"inventario",
								""
							]
						},
						"description": "Obtiene todo el inventario agrupado por producto"
					},
					"response": []
				}
			],
			"description": "Consultar y gestionar el inventario de productos"
		},
		{
			"name": "üè¢ 8. Gestionar Bodegas",
			"item": [
				{
					"name": "Inicializar Bodegas por Defecto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Bodegas inicializadas exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('count');",
									"    pm.expect(response.count).to.be.greaterThan(0);",
									"    console.log('Bodegas creadas:', response.count);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/bodegas/inicializar",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"bodegas",
								"inicializar"
							]
						},
						"description": "Crea 3 bodegas por defecto: Central, Norte y Sur"
					},
					"response": []
				},
				{
					"name": "Obtener Todas las Bodegas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Lista de bodegas obtenida exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"    pm.collectionVariables.set('bodega_id', response[0].id);",
									"    console.log('Bodegas encontradas:', response.length);",
									"    console.log('Primera bodega ID guardado:', response[0].id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/bodegas/",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"bodegas",
								""
							]
						},
						"description": "Obtiene la lista de todas las bodegas disponibles en el sistema"
					},
					"response": []
				},
				{
					"name": "Obtener Todos los Productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Todos los productos obtenidos exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"    console.log('Total productos encontrados:', response.length);",
									"});",
									"",
									"pm.test('Estructura de productos v√°lida', function () {",
									"    const response = pm.response.json();",
									"    const producto = response[0];",
									"    pm.expect(producto).to.have.property('id');",
									"    pm.expect(producto).to.have.property('nombre');",
									"    pm.expect(producto).to.have.property('stock');",
									"    pm.expect(producto).to.have.property('ubicaciones');",
									"    pm.expect(producto.ubicaciones).to.be.an('array');",
									"    pm.expect(producto.ubicaciones.length).to.be.greaterThan(0);",
									"    console.log('Primer producto:', producto);",
									"});",
									"",
									"pm.test('Estructura de ubicaciones v√°lida', function () {",
									"    const response = pm.response.json();",
									"    const ubicacion = response[0].ubicaciones[0];",
									"    pm.expect(ubicacion).to.have.property('nombre');",
									"    pm.expect(ubicacion).to.have.property('pasillo');",
									"    pm.expect(ubicacion).to.have.property('estante');",
									"    pm.expect(ubicacion).to.have.property('stock_disponible');",
									"    pm.expect(ubicacion).to.have.property('stock_reservado');",
									"    pm.expect(ubicacion.stock_disponible).to.be.a('number');",
									"    pm.expect(ubicacion.stock_reservado).to.be.a('number');",
									"    pm.collectionVariables.set('bodega_id', ubicacion.bodega_id);",
									"    console.log('Primera ubicaci√≥n:', ubicacion);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/bodegas/productos",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"bodegas",
								"productos"
							]
						},
						"description": "Obtiene todos los productos de todas las bodegas con sus ubicaciones"
					},
					"response": []
				},
				{
					"name": "Obtener Productos en Bodega",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Productos en bodega obtenidos exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"    console.log('Productos en bodega:', response.length);",
									"});",
									"",
									"pm.test('Estructura de productos v√°lida', function () {",
									"    const response = pm.response.json();",
									"    const producto = response[0];",
									"    pm.expect(producto).to.have.property('producto_id');",
									"    pm.expect(producto).to.have.property('cantidad_total');",
									"    pm.expect(producto).to.have.property('ubicaciones');",
									"    pm.expect(producto.ubicaciones).to.be.an('array');",
									"    pm.expect(producto.ubicaciones.length).to.be.greaterThan(0);",
									"    console.log('Primer producto:', producto);",
									"});",
									"",
									"pm.test('Estructura de ubicaciones v√°lida', function () {",
									"    const response = pm.response.json();",
									"    const ubicacion = response[0].ubicaciones[0];",
									"    pm.expect(ubicacion).to.have.property('pasillo');",
									"    pm.expect(ubicacion).to.have.property('estante');",
									"    pm.expect(ubicacion).to.have.property('cantidad_disponible');",
									"    pm.expect(ubicacion).to.have.property('cantidad_reservada');",
									"    pm.expect(ubicacion.cantidad_disponible).to.be.a('number');",
									"    pm.expect(ubicacion.cantidad_reservada).to.be.a('number');",
									"    console.log('Primera ubicaci√≥n:', ubicacion);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/bodegas/{{bodega_id}}/productos",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"bodegas",
								"{{bodega_id}}",
								"productos"
							]
						},
						"description": "Obtiene todos los productos y sus cantidades en una bodega espec√≠fica"
					},
					"response": []
				},
				{
					"name": "Obtener Ubicacion de Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Ubicaci√≥n de producto obtenida exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('nombre');",
									"    pm.expect(response).to.have.property('ubicaciones');",
									"    pm.expect(response.ubicaciones).to.be.an('array');",
									"    console.log('üßæ Producto:', response.nombre, '| ID:', response.id);",
									"    console.log('Ubicaciones encontradas:', response.ubicaciones.length);",
									"});",
									"",
									"pm.test('Estructura de ubicaciones v√°lida', function () {",
									"    const response = pm.response.json();",
									"    const ubicaciones = response.ubicaciones || [];",
									"    pm.expect(ubicaciones.length).to.be.greaterThan(0);",
									"",
									"    const ubicacion = ubicaciones[0];",
									"    pm.expect(ubicacion).to.have.property('id');",
									"    pm.expect(ubicacion).to.have.property('nombre');",
									"    pm.expect(ubicacion).to.have.property('pasillo');",
									"    pm.expect(ubicacion).to.have.property('estante');",
									"    pm.expect(ubicacion).to.have.property('stock_disponible');",
									"    pm.expect(ubicacion).to.have.property('stock_reservado');",
									"",
									"    pm.expect(ubicacion.stock_disponible).to.be.a('number');",
									"    pm.expect(ubicacion.stock_reservado).to.be.a('number');",
									"",
									"    console.log('üè† Primera ubicaci√≥n:', ubicacion.nombre);",
									"    console.log('üì¶ Pasillo:', ubicacion.pasillo, '| Estante:', ubicacion.estante);",
									"});",
									"",
									"pm.test('Datos de proveedor y categor√≠a v√°lidos', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('proveedor');",
									"    pm.expect(response.proveedor).to.have.property('nombre');",
									"    pm.expect(response.proveedor).to.have.property('direccion');",
									"    pm.expect(response).to.have.property('categoria');",
									"    pm.expect(response.categoria).to.have.property('nombre');",
									"    console.log('üè¢ Proveedor:', response.proveedor.nombre);",
									"    console.log('ü©∫ Categor√≠a:', response.categoria.nombre);",
									"});",
									"",
									"pm.test('Datos generales del producto v√°lidos', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('precio');",
									"    pm.expect(response).to.have.property('stock');",
									"    pm.expect(response).to.have.property('requiere_cadena_frio');",
									"    pm.expect(response.precio).to.be.a('number');",
									"    pm.expect(response.stock).to.be.a('number');",
									"    pm.expect(response.requiere_cadena_frio).to.be.a('boolean');",
									"    console.log('üí≤ Precio:', response.precio, '| Stock total:', response.stock);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/bodegas/producto/{{producto_inventario_id}}/ubicaciones",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"bodegas",
								"producto",
								"{{producto_inventario_id}}",
								"ubicaciones"
							]
						},
						"description": "Obtiene todas las ubicaciones de un producto espec√≠fico en todas las bodegas"
					},
					"response": []
				}
			],
			"description": "Gestionar bodegas y consultar ubicaciones de productos"
		},
		{
			"name": "üöö 9. Consultar Entregas",
			"item": [
				{
					"name": "Crear Entregas de Prueba",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Entregas de prueba creadas exitosamente', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('ids');",
									"    console.log('Entregas creadas:', response.ids);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/entregas/creartemp",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"entregas",
								"creartemp"
							]
						},
						"description": "Crea 20 entregas de prueba para demostraci√≥n"
					},
					"response": []
				},
				{
					"name": "Obtener Todas las Entregas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Entregas obtenidas exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Total de entregas:', response.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/entregas/",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"entregas",
								""
							]
						},
						"description": "Obtiene la lista de todas las entregas programadas"
					},
					"response": []
				},
				{
					"name": "Obtener Entregas por Rango de Fechas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Entregas por rango de fechas obtenidas exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    console.log('Entregas en el rango de fechas:', response.length);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logistica}}/api/entregas?fecha_inicio=2025-10-13&fecha_fin=2025-10-17",
							"host": [
								"{{base_url_logistica}}"
							],
							"path": [
								"api",
								"entregas"
							],
							"query": [
								{
									"key": "fecha_inicio",
									"value": "2025-10-13"
								},
								{
									"key": "fecha_fin",
									"value": "2025-10-17"
								}
							]
						},
						"description": "Obtiene las entregas programadas en un rango de fechas espec√≠fico"
					},
					"response": []
				}
			],
			"description": "Consultar entregas programadas y crear datos de prueba"
		},
		{
			"name": "üìä 10. Informes de ventas",
			"item": [
				{
					"name": "Listar datos informe de ventas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/informes/ventas",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"informes",
								"ventas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar datos informe por vendedor",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/informes/ventas?vendedor_id={{vendedor_id}",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"informes",
								"ventas"
							],
							"query": [
								{
									"key": "vendedor_id",
									"value": "{{vendedor_id}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar datos informe rango de fechas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ventas}}/api/informes/ventas?vendedor_id={{vendedor_id}}&fecha_inicio=2025-09-01T00:00:00&fecha_fin=2025-10-31T23:59:59",
							"host": [
								"{{base_url_ventas}}"
							],
							"path": [
								"api",
								"informes",
								"ventas"
							],
							"query": [
								{
									"key": "vendedor_id",
									"value": "{{vendedor_id}}"
								},
								{
									"key": "fecha_inicio",
									"value": "2025-09-01T00:00:00"
								},
								{
									"key": "fecha_fin",
									"value": "2025-10-31T23:59:59"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost"
		},
		{
			"key": "base_url_usuarios",
			"value": "http://localhost:5001/usuarios"
		},
		{
			"key": "base_url_productos",
			"value": "http://localhost:5000/productos"
		},
		{
			"key": "base_url_ventas",
			"value": "http://localhost:5002/ventas"
		},
		{
			"key": "base_url_logistica",
			"value": "http://localhost:5003/logistica"
		},
		{
			"key": "proveedor_id",
			"value": ""
		},
		{
			"key": "categoria_id",
			"value": ""
		},
		{
			"key": "vendedor_id",
			"value": ""
		},
		{
			"key": "cliente_id",
			"value": ""
		},
		{
			"key": "producto_basico_id",
			"value": ""
		},
		{
			"key": "producto_inventario_id",
			"value": ""
		},
		{
			"key": "visita_id",
			"value": ""
		},
		{
			"key": "pedido_id",
			"value": ""
		},
		{
			"key": "bodega_id",
			"value": ""
		},
		{
			"key": "pedido_completo_id",
			"value": ""
		},
		{
			"key": "bodega_0_id",
			"value": ""
		},
		{
			"key": "bodega_0_nombre",
			"value": ""
		},
		{
			"key": "bodega_1_id",
			"value": ""
		},
		{
			"key": "bodega_1_nombre",
			"value": ""
		},
		{
			"key": "bodega_2_id",
			"value": ""
		},
		{
			"key": "bodega_2_nombre",
			"value": ""
		},
		{
			"key": "bodega_id_ejemplo",
			"value": ""
		},
		{
			"key": "bodega_3_id",
			"value": ""
		},
		{
			"key": "bodega_3_nombre",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "vendedor_auth_id",
			"value": ""
		},
		{
			"key": "cliente_auth_id",
			"value": ""
		},
		{
			"key": "proveedor_auth_id",
			"value": ""
		}
	]
}